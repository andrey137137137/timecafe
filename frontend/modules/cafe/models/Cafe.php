<?php

namespace frontend\modules\cafe\models;

use Yii;

/**
 * This is the model class for table "cafe".
 *
 * @property int $id
 * @property string $name
 * @property int $max_person
 * @property string $address
 * @property string $tps_code
 * @property string $tvq_code
 * @property int $last_task
 * @property double $tps_value
 * @property double $tvq_value
 * @property int $franchisee
 *
 * @property Polls[] $polls
 * @property UserCafe[] $userCafes
 * @property UserTimetable[] $userTimetables
 */
class Cafe extends \yii\db\ActiveRecord
{
  /**
   * @var UploadedFile file attribute
   */
  public $image;

  protected $galleryPath;
  protected $newExt;
  protected $oldExt;

  private $imagePath;

  protected $imageConfig = ['path' => '', 'w' => 200, 'h' => 200, 's' => 100];

  private $imageValidated = false;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'cafe';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
      return [
        [['name', 'params_id'], 'required'],
        [['name', 'address','currency','timeZone'], 'trim'],
        [['name', 'address','currency','timeZone','vat_value'], 'string'],
        [['max_person', 'last_task', 'franchisee'], 'integer'],
        ["logo","image", 'extensions' => 'gif, jpg, jpeg, png'/*, 'skipOnEmpty' => false*/]
      ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Name'),
            'max_person' => Yii::t('app', 'Max Person'),
            'address' => Yii::t('app', 'Address'),
            'last_task' => Yii::t('app', 'Last Task'),
            'franchisee' => Yii::t('app', 'Franchisee'),
            'currency' => Yii::t('app', 'Currency'),
            'timeZone' => Yii::t('app', 'time Zone'),
        ];
    }


  public function beforeValidate()
  {
    if (!parent::beforeValidate()) {
      return false;
    }

    if ($this->isNewRecord) {
      if (Yii::$app->user->isGuest) {
        $this->franchisee = 1;
      } else if (!Yii::$app->user->can('AllFranchisee')) {
        $this->franchisee = Yii::$app->user->identity->franchisee;
      }
    }

    return true;
  }

  public function beforeSave($insert)
  {
    if (parent::beforeSave($insert))
    {
      if ($this->image)
      {
        $this->oldExt = $this->getOldAttribute('ext');

        if ( ! $this->name)
        {
          $ext = '.' . $this->image->extension;

          $nameLen = strlen($this->image->name);
          $extLen = strlen($ext);

          $this->name = substr($this->image->name, 0, $nameLen - $extLen);

          $this->ext = $ext;
        }

        $this->newExt = $this->ext;
        $this->imageValidated = true;
      }

      return true;
    }
    else
    {
      return false;
    }
  }

  public function afterSave($insert, $changedAttributes)
  {
    Yii::$app->cache->delete("cafe_params_".$this->id);
    parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

    if ($this->imageValidated)
    {
      $this->prepareImageConfig();
      $this->updateImage($this->image->tempName, $insert);
    }
  }

  public function beforeDelete()
  {
    if (parent::beforeDelete()/* && ! $this->categories*/)
    {
      $this->oldExt = $this->ext;
      $this->prepareImageConfig();
      $this->deleteImage();
      return true;
    }
    else
    {
      return false;
    }
  }

  /**
     * @return \yii\db\ActiveQuery
     */
    public function getPolls()
    {
        return $this->hasMany(Polls::className(), ['cafe_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserCafes()
    {
        return $this->hasMany(UserCafe::className(), ['cafe_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParam()
    {
      return $this->hasOne(CafeParams::className(), [ 'id'=>'params_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserTimetables()
    {
        return $this->hasMany(UserTimetable::className(), ['cafe_id' => 'id']);
    }

    protected function updateImage($fromPath, $insert)
    {
      if ( ! $insert)
      {
        $this->deleteImage();
      }
  
      $this->setImagePath();
  
      // Image::$driver = Image::DRIVER_GD2;
  
      $this->createImage(
        $fromPath,
        $this->imagePath,
        $this->imageConfig[$key]['w'],
        $this->imageConfig[$key]['h']
      );
    }
  
    protected function deleteImage()
    {
      if (/* ! $this->curModelId && */ ! $this->oldExt)
      {
        return;
      }
  
      $this->setImagePath(false);

      if (file_exists($this->imageConfig['path']))
      {
        return unlink($this->imageConfig['path']);
      }
    }
  
    protected function prepareImageConfig()
    {
      // $this->galleryPath = Yii::getAlias('@gallery') . '/';
      $this->galleryPath = Yii::getAlias('@webroot') . '/web/img/logos/';
  
      $this->imageConfig['path'] = $this->galleryPath;
    }
  
    private function createImage($fromPath, $toPath, $width, $height)
    {
      (new SimpleImage($fromPath))->best_fit($width, $height)->save($toPath, 100);
      // $this->fileModel->image->saveAs($toPath);
  
      // Image::thumbnail($fromPath, $width, $height, ManipulatorInterface::THUMBNAIL_INSET)->save($toPath, ['quality' => 100]);
    }
  
    private function setImagePath($new = true)
    {
      $ext = $new ? $this->newExt : $this->oldExt;
  
      $this->imagePath = $this->imageConfig['path'] . $this->id . $ext;
    }
}
